#!/bin/bash

# Generate GitHub PR comment from redirect test results (Bash Version)
# 
# Usage:
#   ./scripts/generate-pr-comment.sh <results.json>
#
# Author: Conduktor Team

set -euo pipefail

# Check if jq is available
if ! command -v jq &> /dev/null; then
    echo "‚ùå Error: jq is required but not installed."
    echo "Please install jq: apt install jq / brew install jq / https://stedolan.github.io/jq/"
    exit 1
fi

# Check arguments
if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <results.json>"
    exit 1
fi

RESULTS_FILE="$1"

# Check if results file exists
if [[ ! -f "$RESULTS_FILE" ]]; then
    echo "‚ö†Ô∏è **Error generating redirect validation report**

Results file not found: $RESULTS_FILE

Please check the workflow logs for more details.

*This comment was automatically generated by the redirect validation workflow.*"
    exit 1
fi

# Function to generate PR comment
generate_pr_comment() {
    local results_file="$1"
    
    # Extract summary data
    local total passed failed errors success_rate
    total=$(jq -r '.summary.total' "$results_file")
    passed=$(jq -r '.summary.passed' "$results_file")
    failed=$(jq -r '.summary.failed' "$results_file")
    errors=$(jq -r '.summary.errors' "$results_file")
    success_rate=$(jq -r '.summary.successRate' "$results_file")
    
    # Determine status
    local status_emoji status_text
    if (( $(echo "$success_rate >= 95" | bc -l) )); then
        status_emoji="‚úÖ"
        status_text="EXCELLENT"
    elif (( $(echo "$success_rate >= 85" | bc -l) )); then
        status_emoji="üü°"
        status_text="GOOD"
    else
        status_emoji="‚ùå"
        status_text="NEEDS ATTENTION"
    fi
    
    # Calculate percentages
    local passed_pct failed_pct errors_pct
    if [[ $total -gt 0 ]]; then
        passed_pct=$(echo "scale=1; $passed * 100 / $total" | bc)
        failed_pct=$(echo "scale=1; $failed * 100 / $total" | bc)
        errors_pct=$(echo "scale=1; $errors * 100 / $total" | bc)
    else
        passed_pct="0.0"
        failed_pct="0.0"
        errors_pct="0.0"
    fi
    
    # Start building comment
    cat << EOF
üìã **Redirect Validation Results** $status_emoji

**Overall Status:** $status_text (${success_rate}% success rate)

| Metric | Count | Percentage |
|--------|--------|------------|
| ‚úÖ **Passed** | $passed | ${passed_pct}% |
| ‚ùå **Failed** | $failed | ${failed_pct}% |
| ‚ö†Ô∏è **Errors** | $errors | ${errors_pct}% |
| **Total** | $total | 100% |

EOF
    
    # Show failed redirects if any
    local failed_results
    failed_results=$(jq -r '.results[] | select(.status != "PASS")' "$results_file" 2>/dev/null | jq -s length)
    
    if [[ $failed_results -gt 0 ]]; then
        echo ""
        echo "### ‚ùå Failed Redirects ($failed_results)"
        echo ""
        
        # Show first 10 failures
        local count=0
        while IFS=$'\t' read -r source expected actual status notes; do
            if [[ $count -ge 10 ]]; then
                local remaining=$((failed_results - 10))
                echo "... and $remaining more failures. Check the full report in the workflow artifacts."
                echo ""
                break
            fi
            
            echo "**\`$source\`**"
            echo "- Expected: \`$expected\`"
            
            if [[ -n "$actual" && "$actual" != "$expected" ]]; then
                echo "- Actual: \`$actual\`"
            fi
            
            echo "- Status: \`$status\` - $notes"
            echo ""
            
            ((count++))
        done < <(jq -r '.results[] | select(.status != "PASS") | [.source, .expectedDestination, .actualDestination, .status, .notes] | @tsv' "$results_file")
    fi
    
    # Show successful redirects as examples
    local successful_results
    successful_results=$(jq -r '.results[] | select(.status == "PASS")' "$results_file" 2>/dev/null | jq -s length)
    
    if [[ $successful_results -gt 0 ]]; then
        echo "### ‚úÖ Sample Working Redirects ($successful_results total)"
        echo ""
        
        # Show first 5 as examples
        local count=0
        while IFS=$'\t' read -r source expected; do
            if [[ $count -ge 5 ]]; then
                local remaining=$((successful_results - 5))
                echo "- ... and $remaining more working redirects"
                break
            fi
            
            echo "- \`$source\` ‚Üí \`$expected\` ‚úÖ"
            ((count++))
        done < <(jq -r '.results[] | select(.status == "PASS") | [.source, .expectedDestination] | @tsv' "$results_file")
        echo ""
    fi
    
    echo "---"
    echo ""
    
    # Action recommendations
    if (( $(echo "$success_rate < 85" | bc -l) )); then
        cat << EOF
### üîß **Action Required**
This PR contains redirect changes that are not working correctly. Please:

1. Review the failed redirects listed above
2. Check that destination paths exist in the current site structure  
3. Verify redirect syntax in \`docs.json\`
4. Test redirects locally before pushing changes

EOF
    elif (( $(echo "$success_rate < 95" | bc -l) )); then
        cat << EOF
### ‚ö†Ô∏è **Minor Issues Detected**
Most redirects are working, but a few need attention. Consider reviewing the failed redirects above.

EOF
    else
        cat << EOF
### üéâ **All Good!**
All redirects are working correctly. Great job! 

EOF
    fi
    
    # Technical details
    local total_duration base_url timestamp
    total_duration=$(jq -r '.summary.totalDuration' "$results_file")
    base_url=$(jq -r '.baseUrl' "$results_file")
    timestamp=$(jq -r '.timestamp' "$results_file")
    
    # Convert duration from ms to seconds
    local duration_seconds
    duration_seconds=$(echo "scale=2; $total_duration / 1000" | bc)
    
    cat << EOF
<details>
<summary>üìä **Technical Details**</summary>

- **Test Duration:** ${duration_seconds} seconds
- **Base URL:** $base_url
- **Test Method:** HTTP HEAD requests with redirect following (bash + curl)
- **Timestamp:** $timestamp

</details>

*This comment was automatically generated by the redirect validation workflow.*
EOF
}

# Main execution
if ! generate_pr_comment "$RESULTS_FILE"; then
    # Fallback error message
    cat << EOF
‚ö†Ô∏è **Error generating redirect validation report**

An error occurred while processing the test results from: $RESULTS_FILE

Please check the workflow logs for more details.

*This comment was automatically generated by the redirect validation workflow.*
EOF
    exit 1
fi