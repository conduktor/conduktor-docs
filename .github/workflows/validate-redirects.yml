name: Validate Documentation Redirects

on:
  pull_request:
    paths:
      - 'docs.json'
      - '.github/workflows/validate-redirects.yml'
      - 'scripts/test-redirects.sh'
      - 'scripts/generate-pr-comment.sh'
  push:
    branches:
      - main
    paths:
      - 'docs.json'
  workflow_dispatch: # Allow manual triggering

jobs:
  validate-redirects:
    name: Validate Redirect Rules
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: |
          chmod +x scripts/test-redirects.sh
          chmod +x scripts/generate-pr-comment.sh
          chmod +x scripts/test-network.sh

      - name: Validate docs.json syntax
        run: |
          echo "Validating docs.json syntax..."
          jq empty docs.json || {
            echo "‚ùå docs.json has invalid JSON syntax"
            exit 1
          }
          echo "‚úÖ docs.json syntax is valid"

      - name: Test network connectivity
        run: |
          echo "Testing network connectivity and basic functionality..."
          ./scripts/test-network.sh

      - name: Count redirect rules
        id: count_redirects
        run: |
          REDIRECT_COUNT=$(jq '.redirects | length' docs.json)
          echo "redirect_count=$REDIRECT_COUNT" >> $GITHUB_OUTPUT
          echo "Found $REDIRECT_COUNT redirect rules to test"

      - name: Run redirect validation tests
        id: redirect_tests
        run: |
          echo "Testing redirects against production site..."
          echo "Starting script with timeout wrapper..."
          
          # Use timeout to prevent hanging (5 minutes max)
          timeout 300 ./scripts/test-redirects.sh docs.json verbose > redirect-test-output.log 2>&1 || {
            echo "Script execution result: $?"
            echo "Script may have timed out or failed"
          }
          
          # Always show the output for debugging
          echo "=== Test Results ==="
          cat redirect-test-output.log || echo "No output file found"
          echo "==================="
          
          # Check if tests passed (but don't exit here - let continue-on-error handle it)
          if grep -q "SUMMARY" redirect-test-output.log; then
            echo "‚úÖ Tests completed (check results above)"
            exit 0
          else
            echo "‚ùå Tests may not have completed properly"
            exit 1
          fi
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: redirect-test-results
          path: redirect-test-output.log
          retention-days: 30

      - name: Generate test summary for PR
        if: github.event_name == 'pull_request'
        run: |
          # Create a simple PR comment from the log output
          if [[ -f redirect-test-output.log ]]; then
            echo "üìã **Redirect Validation Results**" > pr-comment.md
            echo "" >> pr-comment.md
            
            # Extract summary from log
            if grep -q "SUMMARY" redirect-test-output.log; then
              echo "\`\`\`" >> pr-comment.md
              sed -n '/SUMMARY/,/^$/p' redirect-test-output.log | head -10 >> pr-comment.md
              echo "\`\`\`" >> pr-comment.md
            else
              echo "Test output:" >> pr-comment.md
              echo "\`\`\`" >> pr-comment.md
              tail -20 redirect-test-output.log >> pr-comment.md
              echo "\`\`\`" >> pr-comment.md
            fi
            
            echo "" >> pr-comment.md
            echo "*Generated by redirect validation workflow*" >> pr-comment.md
          else
            echo "‚ö†Ô∏è Redirect validation tests failed to complete. Please check the logs." > pr-comment.md
          fi

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('pr-comment.md')) {
              const comment = fs.readFileSync('pr-comment.md', 'utf8');
              
              // Find existing comment to update
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('üìã **Redirect Validation Results**')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
                console.log('Updated existing PR comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
                console.log('Created new PR comment');
              }
            } else {
              console.log('No pr-comment.md file found');
            }

      - name: Check test results and fail if necessary
        run: |
          if [[ "${{ steps.redirect_tests.outcome }}" == "failure" ]]; then
            echo "‚ùå Redirect validation tests failed"
            exit 1
          else
            echo "‚úÖ Redirect validation completed successfully"
          fi